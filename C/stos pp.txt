#include stdio.h
#include stdlib.h

typedef int stack_el_t;   Stos przechowuje elementy typu in w polu value
 Wartość, która zwróci funkcja pop() w przypadku próby usuwania elementu
 z pustego stosu
#define STACK_ERROR -1

 Typ struktury, opisujący listę jednokierunkową liczb całkowitych.
 Głowa listy ma nieokreśloną wartość pola value.
 Lista jest wykorzystana do implementacji stosu.
 W naszej implementacji element na szczycie stosu, to ten
 wskazywany przez pole next należące do głowy listy.
typedef struct list {
    stack_el_t value;
    struct list next;
} stack_t;

 Inicjalizacja stosu o głowie head.
void init( stack_t head ) {
    head-next = NULL;
}

 Operacja wstawia element z wartością value na szczyt stosu.
void push( stack_t l, stack_el_t value ) {
    stack_t x = (stack_t ) malloc( sizeof(stack_t) );

    x-value = value;
    x-next = l-next;
    l-next = x;
}

 Usuwanie elementu ze szczytu stosu.
 Funkcja zwraca wartość pola value usuniętego elementu, lub
 wartość STACK_ERROR w przypadku gdy stos jest pusty i nie było możliwe
 usunięcie elementu. Uwaga jest to implementacja błędna jeśli
 -1 jest dopuszczalną wartością dla pola value.
stack_el_t pop( stack_t l ) {
    if ( l-next == NULL )
        return -1;    Stos jest pusty.
    stack_el_t el = l-next-value;
    void x = l-next;
    l-next = l-next-next;
    free( x );
    return el;
}

 Wypisuje zawartość stosu h, zaczynając od elementów na jego szczycie.
void print( stack_t h ) {
    h = h-next;  Pomijamy wartość nieokreśloną w głowie.
    while ( h != NULL ) {
        printf (%d , h-value);
        h = h-next;
    }
    printf (n);
}


int main() {
    stack_t s;

    init( &s );

    for ( stack_el_t i=1; i = 5; i++ ) {
        push( &s, i );
	print ( &s );
    }
    
    for ( stack_el_t i=1; i = 6; i++ )
        printf( Usunięto %dn, pop( &s ) );

    return 0;
}